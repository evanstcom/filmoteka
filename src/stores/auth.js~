import {defineStore} from 'pinia'
import axios from 'axios'
import {ref} from 'vue'

const apiKey = import.meta.env.VITE_API_KEY_FIREBASE

export const useAuthStore = defineStore('auth', () => {
    const error = ref('')

    const loader = ref(false)

    const userInfo = ref({
        email: '',
        token: '',
        userId: '',
        refreshToken: '',
        expiresIn: '',
        name: ''
    })
    const auth = async (payload, type) => {
        const urlType = type === 'login' ? 'signInWithPassword' : 'signUp'
        error.value = ''
        loader.value = true
        try {
            const {data} = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:${urlType}?key=${apiKey}`, {
                ...payload,
                returnSecureToken: true
            })
            userInfo.value = {
                email: data.email,
                token: data.idToken,
                userId: data.localId,
                refreshToken: data.refreshToken,
                expiresIn: data.expiresIn,
                name: data.displayName
            }
            localStorage.setItem('user', JSON.stringify({
                token: userInfo.value.token,
                refreshToken: userInfo.value.refreshToken,
                name: userInfo.value.name,
                expiresIn: userInfo.value.expiresIn
                email: userInfo.value.email
            }))
            console.log(userInfo.value)
        } catch (e) {
            switch (e.response.data.error.message) {
                case 'EMAIL_EXISTS':
                    error.value = 'Такой email уже зарегистрирован'
                    break
                case 'WEAK_PASSWORD : Password should be at least 6 characters':
                    error.value = 'Слишком слабый пароль, минимум 6 символов'
                    break
                case 'OPERATION_NOT_ALLOWED':
                    error.value = 'Регистрация недоступна'
                    break
                case 'TOO_MANY_ATTEMPTS_TRY_LATER':
                    error.value = 'Слишком много попыток входа. Попробуйте позже'
                    break
                case 'EMAIL_NOT_FOUND':
                    error.value = 'Такой пользователь не найден'
                    break
                case 'INVALID_PASSWORD':
                    error.value = 'Неверный логин или пароль'
                    break
                case 'INVALID_LOGIN_CREDENTIALS':
                    error.value = 'Неверный логин или пароль'
                    break
                case 'USER_DISABLED':
                    error.value = 'Учетная запись неактивна'
                    break
                default:
                    error.value = 'Что-то пошло не так'
                    break
            }
            throw e.value
        } finally {
            loader.value = false
        }
    }
    const logout = () => {
        localStorage.removeItem('user')
        userInfo.value = {
            email: '',
            token: '',
            userId: '',
            refreshToken: '',
            expiresIn: '',
            name: ''
        }
    }
    return {auth, logout, userInfo, error, loader}
})
