<template>
  <TransitionRoot as="template" :show="openPopup">
    <Dialog class="relative z-10" @close="handleClick">
      <TransitionChild as="template"
                       enter="duration-300 ease-out"
                       enter-from="opacity-0"
                       enter-to="opacity-100"
                       leave="duration-200 ease-in"
                       leave-from="opacity-100"
                       leave-to="opacity-0">
        <div class="fixed inset-0 bg-gray-900/45 r-0 transition-opacity"/>
      </TransitionChild>

      <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
        <div class="flex min-h-full justify-center items-center p-4 text-center sm:items-center">
          <TransitionChild
              as="template"
              enter="duration-300 ease-out"
              enter-from="opacity-0 scale-95"
              enter-to="opacity-100 scale-100"
              leave="duration-200 ease-in"
              leave-from="opacity-100 scale-100"
              leave-to="opacity-0 scale-95"
          >
            <DialogPanel
                class="relative transform overflow-hidden rounded-lg text-left shadow-xl transition-all flex flex-col w-full sm:my-8">
              <div class="bg-gray-900 px-4 pb-4 pt-4">
                <div class="items-center justify-center">
                  <div
                      class="mx-auto flex size-12 shrink-0 items-center justify-center rounded-full bg-green-100 sm:size-10">
                    <ExclamationTriangleIcon class="size-6 text-green-600" aria-hidden="true"/>
                  </div>
                  <div class="mt-3">
                    <DialogTitle as="h3" class="text-base font-semibold text-center">Notification token</DialogTitle>
                    <div class="mt-2">
                      <div class="text-sm text-gray-500 break-words text-center">{{
                          token
                        }}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="bg-gray-900 px-4 py-4 items-center flex flex-col ">
                <button type="button"
                        class="inline-flex w-full justify-center rounded-md bg-orange-600 outline-none px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-orange-500 sm:w-auto"
                        @click="copyText">Copy token
                </button>
                <button type="button"
                        class="mt-3 inline-flex text-center justify-center rounded-md w-full px-3 py-2 text-sm font-semibold shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 hover:text-gray-900 sm:w-auto"
                        @click="handleClick" ref="cancelButtonRef">Cancel
                </button>
              </div>
            </DialogPanel>
          </TransitionChild>
        </div>
      </div>
    </Dialog>
  </TransitionRoot>
</template>

<script setup>
import {
  TransitionRoot,
  TransitionChild,
  Dialog,
  DialogPanel,
  DialogTitle,
} from '@headlessui/vue'
import {ExclamationTriangleIcon} from '@heroicons/vue/24/outline'
import {onMounted, ref} from "vue";
import {getToken, onMessage} from "firebase/messaging";
import {getMessaging} from "firebase/messaging/sw";

defineProps({
  openPopup: {
    type: Boolean,
    required: true
  },
  handleClick: {
    type: Function,
    required: true
  }
})


const token = ref(localStorage.getItem('token'));
const notification = ref('')
const notificationRequest = ref(false)

const notificationPermission = () => {
  Notification.requestPermission().then((permission) => {
    if (permission === 'granted') {
      console.log('Разрешение на уведомления получено!');
      notification.value = 'Разрешение на уведомления получено'
      notificationRequest.value = false
    } else {
      console.log('Разрешение на уведомления отклонено.');
      notification.value = 'Разрешение на уведомления отклонено'
      notificationRequest.value = true
    }
  });
}

const copyText = () => {
  navigator.clipboard.writeText(token.value).then(() => {
    console.log('Текст скопирован в буфер обмена');
  })
}

const messaging = getMessaging();

const getTokenNotification = async () => {
  await getToken(messaging, {vapidKey: 'BPLWoA5EryQNWtQIwl6EnJjvpufIc4h2QlIc6YuvB3TGmwB-whOjddQLHS9afM6-0J62JvQQ8U7KkdE6PUATyBk'}).then((currentToken) => {
    if (currentToken) {
      console.log('currentToken', currentToken);
      token.value = currentToken
      localStorage.setItem('token', currentToken)
    } else {
      console.log('No registration token available. Request permission to generate one.');
    }
  }).catch((err) => {
    console.log('An error occurred while retrieving token. ', err);
  });
}
onMessage(messaging, (payload) => {
  console.log('Message received. ', payload);
});

onMounted(() => {
  notificationPermission()
  if (!token.value) getTokenNotification()
})
</script>




