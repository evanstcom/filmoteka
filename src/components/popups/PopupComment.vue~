<template>
  <TransitionRoot as="template" :show="openPopup">
    <Dialog class="relative z-10" @close="handleClick">
      <TransitionChild as="template"
                       enter="duration-300 ease-out"
                       enter-from="opacity-0"
                       enter-to="opacity-100"
                       leave="duration-200 ease-in"
                       leave-from="opacity-100"
                       leave-to="opacity-0">
        <div class="fixed inset-0 bg-gray-900/45 r-0 transition-opacity"/>
      </TransitionChild>

      <div class="fixed inset-0 z-10 w-screen overflow-y-auto">
        <div class="flex min-h-full justify-center items-center p-4 text-center sm:items-center backdrop-blur-sm">
          <TransitionChild
              as="template"
              enter="duration-300 ease-out"
              enter-from="opacity-0 scale-95"
              enter-to="opacity-100 scale-100"
              leave="duration-200 ease-in"
              leave-from="opacity-100 scale-100"
              leave-to="opacity-0 scale-95"
          >
            <DialogPanel
                class="relative transform overflow-hidden rounded-lg text-left shadow-xl transition-all flex flex-col w-full sm:my-8 ">
              <div class="bg-white px-4 pb-4 pt-4 ">
                <div class="items-center justify-center relative">
                  <div class="mt-3">
                    <DialogTitle as="h3" class="text-base font-semibold text-center">Оставить отзыв
                    </DialogTitle>
                  </div>
                  <div v-if="error"
                       class="absolute left-1/2 -translate-x-1/2 w-full -bottom-6 flex items-center justify-center gap-2">
                    <ExclamationTriangleIcon class="size-4 text-red-500" aria-hidden="true"/>
                    <div class="text-center text-xs text-red-500">
                      {{ error }}
                    </div>
                  </div>
                </div>
              </div>
              <form class="space-y-1 bg-white" action="#" method="POST">
                <div class="bg-white px-4 pb-4 pt-2">
                  <div class="p-1">
                    <textarea v-model="comment" type="text" id="comment" autocomplete=off required rows="6"
                              placeholder="Напишите здесь отзыв"
                              class="block p-1 text-xs w-full rounded-md bg-gray-100 px-3 py-1.5 outline-none -outline-offset-1 placeholder:text-gray-400 sm:text-sm/6 resize-none max-h-96 overflow-hidden overflow-y-scroll"/>
                  </div>
                  <div class="flex flex-col gap-2 my-2 items-center">
                    <div
                        class="text-md font-medium bg-gray-100 text-orange-600 w-10 h-10 flex items-center justify-center rounded-lg">
                      <div
                          :class="vote[0] < 4 ? 'text-red-400' : vote[0] < 7 ? 'text-gray-400' : vote[0] > 8 ? 'text-yellow-400' : 'text-green-400'">
                        {{
                          vote[0]
                        }}
                      </div>
                    </div>
                    <SliderRoot
                        v-model="vote"
                        class="relative flex items-center select-none touch-none w-full px-1 h-5"
                        :max="10"
                    >
                      <SliderTrack class="bg-stone-500/30 relative grow rounded-full h-2">
                        <SliderRange class="absolute rounded-full h-full"
                                     :class="vote[0] < 4 ? 'bg-red-400' : vote[0] < 7 ? 'bg-gray-400' : vote[0] > 8 ? 'bg-yellow-400' : 'bg-green-400'"
                        />
                      </SliderTrack>
                      <SliderThumb
                          class="block w-6 h-6 bg-gray-200 rounded-full shadow-sm focus:outline-none border-2 border-gray-100"
                          aria-label="Volume"
                      />
                    </SliderRoot>
                  </div>
                  <h4 class="text-center text-xs text-gray-600">
                    Ваша оценка
                  </h4>
                </div>
                <div class="bg-white px-4 pb-4 pt-2">
                  <button
                      v-if="!loader"
                      type="button"
                      class="inline-flex w-full justify-center rounded-md bg-orange-600 outline-none py-2 text-sm font-semibold text-white shadow-sm hover:bg-orange-500 sm:w-auto"
                      @click="() =>{
                    pushComment()
                    if (!error) handleClick()}">
                    Оставить отзыв
                  </button>

                  <Loading v-else :full-screen="false"/>
                  <button type="submit"
                          class="mt-3 inline-flex text-center justify-center rounded-md w-full py-2 text-sm font-semibold ring-inset sm:w-auto"
                          @click.prevent="handleClick" ref="cancelButtonRef">Закрыть
                  </button>
                </div>
              </form>
            </DialogPanel>
          </TransitionChild>
        </div>
      </div>
    </Dialog>
  </TransitionRoot>
</template>

<script setup>
import {
  TransitionRoot,
  TransitionChild,
  Dialog,
  DialogPanel,
  DialogTitle,
} from '@headlessui/vue'
import {ref} from "vue";
import Loading from "@/components/ui/Loading.vue";
import {ExclamationTriangleIcon} from "@heroicons/vue/24/outline/index.js";
import {getDatabase, ref as dbRef, set} from "firebase/database";
import {getAuth} from "firebase/auth";

import {SliderRange, SliderRoot, SliderThumb, SliderTrack} from 'reka-ui'

const auth = getAuth();
const db = getDatabase();

const error = ref('')

const loader = ref(false)

const {openPopup, handleClick, userComment, filmId} = defineProps({
  openPopup: {
    type: Boolean,
    required: true
  },
  handleClick: {
    type: Function,
    required: true
  },
  userComment: {
    type: Object,
    required: false,
    default: {
      comment: '',
      vote: 0
    }
  },
  filmId: {
    type: String,
    required: true
  },
  newComment: {
    type: Boolean,
    required: false,
    default: false
  }
})
const comment = ref(userComment ? userComment.comment : '')
const vote = ref(userComment ? [userComment.vote] : 0)


const pushComment = () => {
  if (!comment.value) {
    return error.value = 'Вы ничего не написали'
  } else {
    loader.value = true
    error.value = ''
    set(dbRef(db, `items/${filmId}/comments/${auth.currentUser.uid}`), {
      comment: comment.value,
      vote: vote.value[0],
      name: auth.currentUser.displayName,
      date: new Date().toLocaleString('ru-RU', {timeZone: 'UTC'}),
      uid: auth.currentUser.uid
    }).then(() => console.log('Добавлено')).catch((error) => console.log(error))
    loader.value = false
  }
}

</script>

<style lang="sass">
</style>




